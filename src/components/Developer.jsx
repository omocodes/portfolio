/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef } from 'react'
import { useAnimations, useGLTF, useFBX } from '@react-three/drei'

const Developer = ({ animationName = 'idle', ...props }) => {
  const group = useRef()
  const { nodes, materials } = useGLTF('/models/developer.glb')

  // Load animations
  const idleAnimation = useFBX('/models/animations/idle.fbx')
  idleAnimation.animations[0].name = 'idle'

  const saluteAnimation = useFBX('/models/animations/salute.fbx')
  saluteAnimation.animations[0].name = 'salute'

  const clappingAnimation = useFBX('/models/animations/clapping.fbx')
  clappingAnimation.animations[0].name = 'clapping'

  const victoryAnimation = useFBX('/models/animations/victory.fbx')
  victoryAnimation.animations[0].name = 'victory'

  // Pass all animations to useAnimations
  const { actions } = useAnimations([
    idleAnimation.animations[0],
    saluteAnimation.animations[0],
    clappingAnimation.animations[0],
    victoryAnimation.animations[0]
  ], group)

  useEffect(() => {
    // Stop all animations first
    Object.values(actions).forEach(action => {
      if (action && action.stop) action.stop()
    })

    // Play the requested animation if it exists
    if (actions[animationName]) {
      actions[animationName].reset().fadeIn(0.5).play()
    }

    return () => {
      // Fade out the current animation when component unmounts or animation changes
      if (actions[animationName]) {
        actions[animationName].fadeOut(0.5)
      }
    }
  }, [animationName, actions])

  return (
    <group {...props} dispose={null} ref={group}>
      <primitive object={nodes.Hips} />
      <skinnedMesh
        name="EyeLeft"
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
      />
      <skinnedMesh
        name="EyeRight"
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Head"
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Teeth"
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
      />
    </group>
  )
}

useGLTF.preload('/models/developer.glb')

export default Developer